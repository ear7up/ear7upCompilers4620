/* File:  scanner.l
 * ----------------
 * Lex inupt file to generate the scanner for the compiler.
 */

%{

/* The text within this first region delimited by %{ and %} is assumed to
 * be C/C++ code and will be copied verbatim to the lex.yy.c file ahead
 * of the definitions of the yylex() function. Add other header file inclusions
 * or C++ variable declarations/prototypes that are needed by your code here.
 */

#include <string.h>
#include "scanner.h"
#include "utility.h" // for PrintDebug()
#include "errors.h"

/* Global variable: yylval
 * -----------------------
 * This global variable is how we get attribute information about the token
 * just scanned to the client. The scanner sets the global variable
 * appropriately and since it's global the client can just read it.  In the
 * future, this variable will be declared for us in the y.tab.c file
 * produced by Yacc, but for now, we declare it manually.
 */
YYSTYPE yylval;  // manually declared for pp1, later Yacc provides

/* Global variable: yylloc
 * -----------------------
 * This global variable is how we get position information about the token
 * just scanned to the client. (Operates similarly to yylval above)
 */
struct yyltype yylloc; // manually dclared for pp1, later Yacc provides

/* Global variable: position
 * -------------------------
 * This global variables the current character position of the parser
 */
int position=0;

// Global variable: line - tracks the current line number being parsed
int line=1;

/* Macro: YY_USER_ACTION 
 * ---------------------
 * This flex built-in macro can be defined to provide an action which is
 * always executed prior to any matched rule's action. Basically, it is
 * a way of having a piece of code common to all actions factored out to
 * this routine.  We already defined it for you and left the empty
 * function DoBeforeEachAction ready for your use as needed. It will
 * be called once for each pattern scanned from the file, before
 * executing its action.
 */
static void DoBeforeEachAction(); 
#define YY_USER_ACTION DoBeforeEachAction();

%}

 /* The section before the first %% is the Definitions section of the lex
  * input file. Here is where you set options for the scanner, define lex
  * states, and can set up definitions to give names to regular expressions
  * as a simple substitution mechanism that allows for more readable
  * entries in the Rules section later. 
  */

KEYWORD               (void|int|double|bool|string|class|interface|null|this|extends|implements|for|while|if|else|return|break|New|NewArray)
STRING                (\"([^\\"\n])*\")
UNTERM_STRING         (\"([^\\"])*)
IDENTIFIER            ([a-zA-Z][a-zA-Z0-9_]*)
TWO_CHAR_OPERATORS    (<=|>=|==|!=|&&|\|\|)
PUNCTUATION           (\+|\-|\*|\/|\%|<|>|=|!|;|,|\.|[|]|\(|\)|\{|\})
DEC_INTEGER           ([0-9]*)
HEX_INTEGER	      (0(x|X)[0-9A-Fa-f]*)
DOUBLE                ([0-9]+\.[0-9]*((E|e)(\+|\-)?[0-9]*)?)
BOOLEAN               (true|false)
END_OF_LINE           ([\r\n]) 

%%             /* BEGIN RULES SECTION */
 /* All patterns and actions should be placed between the start and stop
  * %% markers which delimit the Rules section. 
  */ 

{KEYWORD}     {
                  if (!strcmp(yytext, "void")) return T_Void;
		  if (!strcmp(yytext, "int")) return T_Int;
		  if (!strcmp(yytext, "double")) return T_Double;
		  if (!strcmp(yytext, "bool")) return T_Bool;
		  if (!strcmp(yytext, "string")) return T_String;
		  if (!strcmp(yytext, "class")) return T_Class;
		  if (!strcmp(yytext, "interface")) return T_Interface;
		  if (!strcmp(yytext, "null")) return T_Null;
		  if (!strcmp(yytext, "this")) return T_This;
		  if (!strcmp(yytext, "extends")) return T_Extends;
		  if (!strcmp(yytext, "implements")) return T_Implements;
		  if (!strcmp(yytext, "for")) return T_For;
		  if (!strcmp(yytext, "while")) return T_While;
		  if (!strcmp(yytext, "if")) return T_If;
		  if (!strcmp(yytext, "else")) return T_Else;
		  if (!strcmp(yytext, "return")) return T_Return;
		  if (!strcmp(yytext, "break")) return T_Break;
		  if (!strcmp(yytext, "New")) return T_New;
		  if (!strcmp(yytext, "NewArray")) return T_NewArray;
              }
{DEC_INTEGER} {
                  yylval.integerConstant = atoi(yytext);
                  return T_IntConstant;
              }
{HEX_INTEGER} {
                  yylval.integerConstant = (int)strtol(yytext, NULL, 16);
                  return T_IntConstant;
              }
{DOUBLE}      {
                  yylval.doubleConstant = atof(yytext);
                  return T_DoubleConstant;
              }
{BOOLEAN}     {
                  yylval.boolConstant = (!strcmp(yytext, "true"))? 1:0;
                  return T_BoolConstant;
              }
{STRING}      {
                  yylval.stringConstant = yytext;
                  return T_StringConstant;
              }
{UNTERM_STRING} { ReportError::UntermString(&yylloc, (const char*)yytext); }
{IDENTIFIER}  {
                  if (yyleng > 31) 
                  {
                      ReportError::LongIdentifier(&yylloc, (const char*)yytext);
                      strncpy(yylval.identifier, yytext, MaxIdentLen);
                      yylval.identifier[MaxIdentLen+1] = '\0';
                  }
                  else strcpy(yylval.identifier, yytext);
                  return T_Identifier;
              }
{END_OF_LINE} { position = 0; line++; }
[ \t]         { }
{TWO_CHAR_OPERATORS} {
                  if (!strcmp(yytext, "<=")) return T_LessEqual;
                  if (!strcmp(yytext, ">=")) return T_GreaterEqual;
                  if (!strcmp(yytext, "!=")) return T_NotEqual;
                  if (!strcmp(yytext, "==")) return T_Equal;
                  if (!strcmp(yytext, "&&")) return T_And;
                  if (!strcmp(yytext, "||")) return T_Or;
                  else printf("Compiler error: yytext '%s' matched 'TWO_CHAR_OPERATORS' but no listed operator was found.\n", yytext);
              }
{PUNCTUATION} {
                  return yytext[0];
              }
.|\n          {ReportError::UnrecogChar(&yylloc, yytext[0]);}

%%
/* The closing %% above marks the end of the Rules section and the beginning
 * of the User Subroutines section. All text from here to the end of the
 * file is copied verbatim to the end of the generated lex.yy.c file.
 * This section is where you put definitions of helper functions.
 */


/* Function: InitScanner
 * ---------------------
 * This function will be called before any calls to yylex().  It is designed
 * to give you an opportunity to do anything that must be done to initialize
 * the scanner (set global variables, configure starting state, etc.). One
 * thing it already does for you is assign the value of the global variable
 * yy_flex_debug that controls whether flex prints debugging information
 * about each token and what rule was matched. If set to false, no information
 * is printed. Setting it to true will give you a running trail that might
 * be helpful when debugging your scanner. Please be sure the variable is
 * set to false when submitting your final version.
 */
void InitScanner()
{
    PrintDebug("lex", "Initializing scanner");
    yy_flex_debug = false;
}


/* Function: DoBeforeEachAction()
 * ------------------------------
 * This function is installed as the YY_USER_ACTION. This is a place
 * to group code common to all actions.
 */
static void DoBeforeEachAction()
{
    yylloc.first_line = line;
    yylloc.last_line = line;
    yylloc.first_column = position+1;
    position += yyleng;
    yylloc.last_column = position;
}
